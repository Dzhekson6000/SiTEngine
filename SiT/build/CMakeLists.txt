cmake_minimum_required(VERSION 2.8)

SET( LIB SiT ) 
PROJECT( ${LIB} )

SET( MAJOR_VERSION 1.0.0 )
SET( MINOR_VERSION 1.0 )

SET( SOURCE_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/.." )

IF(UNIX AND NOT APPLE)
    SET(LINUX ON)
ENDIF(UNIX AND NOT APPLE)

IF(WIN32)
	MESSAGE(SEND_ERROR "WINDOWS is unsupported yet ;)")
ENDIF(WIN32)


#--------------------------------------------------------------------
# Set source files.
#--------------------------------------------------------------------
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT} SRC)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Base SRC_BASE)  
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Events SRC_EVENTS)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Graphics SRC_GRAPHICS)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Graphics/2d SRC_GRAPHICS)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Graphics/Render SRC_GRAPHICS_RENDER)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Graphics/Render/Command SRC_GRAPHICS_RENDER_COMMAND)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Graphics/Shader SRC_GRAPHICS_SHEDER)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Libs SRC_LIBS)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Libs/LibOpenAL SRC_LIBS_LIBOPENAL)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Libs/LibOpenGL SRC_LIBS_LIBOPENGL)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Platform SRC_PLATFORM)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Resource SRC_RESOURCE)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Resource/Texture SRC_RESOURCE_TEXTURE)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Sound SRC_SOUND)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Types SRC_TYPES)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Types/Matrix SRC_TYPES_MATRIX)
AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Utilities SRC_UTILITIES)

IF(LINUX)
    AUX_SOURCE_DIRECTORY(${SOURCE_ROOT}/Platform/Linux SRC_PLATFORM_OS)
ENDIF(LINUX)

# Set up GLFW
SET(INCLUDE_LIB_DIR ${INCLUDE_LIB_DIR} ${SOURCE_ROOT}/external/glfw/include/)
# Set up OpenAL
FIND_PACKAGE(OpenAL REQUIRED)
# Set up Freetype
FIND_PACKAGE(Freetype REQUIRED)
SET(INCLUDE_LIB_DIR ${INCLUDE_LIB_DIR} ${FREETYPE_INCLUDE_DIRS})
# Set up GLEW
FIND_PACKAGE(GLEW REQUIRED)
SET(INCLUDE_LIB_DIR ${INCLUDE_LIB_DIR} ${SOURCE_ROOT}/external/glew/include/)
# Set up libjpeg
FIND_PACKAGE(JPEG REQUIRED)

#--------------------------------------------------------------------
# Compile
#--------------------------------------------------------------------

INCLUDE_DIRECTORIES(
    ${SOURCE_ROOT}
    ${FREETYPE_INCLUDE_DIRS}
    ${OPENAL_INCLUDE_DIR}
    ${PNG_INCLUDE_DIRS}
    ${JPEG_INCLUDE_DIR}
    ${INCLUDE_LIB_DIR}
)

ADD_LIBRARY(
	${LIB} SHARED 
	${SRC}
	${SRC_BASE}
	${SRC_EVENTS} 
	${SRC_GRAPHICS}
        ${SRC_GRAPHICS_RENDER}
        ${SRC_GRAPHICS_RENDER_COMMAND}
        ${SRC_GRAPHICS_SHEDER}
        ${SRC_LIBS}
        ${SRC_LIBS_LIBOPENAL}
        ${SRC_LIBS_LIBOPENGL}
	${SRC_PLATFORM}
        ${SRC_PLATFORM_OS}
	${SRC_RESOURCE}
        ${SRC_RESOURCE_TEXTURE}
	${SRC_SOUND} 
	${SRC_TYPES}
	${SRC_TYPES_MATRIX}
	${SRC_UTILITIES}
) 

SET_TARGET_PROPERTIES(${LIB}
	PROPERTIES 
	VERSION ${MAJOR_VERSION}
	SOVERSION ${MINOR_VERSION}
)

TARGET_LINK_LIBRARIES(${LIB}
    glfw ${GLFW_LIBRARIES}
    ${OPENAL_LIBRARY}
    ${OPENGL_LIBRARIES}
    ${ZLIB_LIBRARIES}
    ${JPEG_LIBRARIES}
    ${PNG_LIBRARIES}
    ${FREETYPE_LIBRARIES}
    ${GLEW_LIBRARIES}.1.10
)